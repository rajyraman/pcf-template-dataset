name: build

on:
  workflow_dispatch:
    inputs:
     release:
      description: 'Release Solution'
      required: false
      default: 'false'
  push:
    branches: [master]
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: actions/checkout@v2
        
      - id: checkpcfconfig
        run: |
          Test-Path pcfconfig.json
          echo "::set-output name=exists::$(Test-Path pcfconfig.json)"
          $solutionPath = $('${{ github.repository }}' -replace '${{ github.repository_owner }}/', '' -replace '[^a-zA-Z]', '')
          echo "::set-output name=buildtarget::Solution/$solutionPath"
          
      - name: Use Node.js ${{ matrix.node-version }}
        if: steps.checkpcfconfig.outputs.exists == 'True'
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Solution Unique name
        if: steps.checkpcfconfig.outputs.exists == 'True'
        id: solution-unique-name
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: "${{ steps.checkpcfconfig.outputs.buildtarget }}/src/Other/Solution.xml"
          xpath: "//ImportExportXml/SolutionManifest/UniqueName"

      - name: Solution Version
        if: steps.checkpcfconfig.outputs.exists == 'True'
        id: solution-version
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: '${{ steps.checkpcfconfig.outputs.buildtarget }}/src/Other/Solution.xml'
          xpath: "//ImportExportXml/SolutionManifest/Version"

      - name: Install dependencies
        if: steps.checkpcfconfig.outputs.exists == 'True'
        run: npm ci

      - run: npm run build --if-present
        if: steps.checkpcfconfig.outputs.exists == 'True'

      - name: MSBuild
        if: steps.checkpcfconfig.outputs.exists == 'True'
        working-directory: ${{ steps.checkpcfconfig.outputs.buildtarget }}
        run: |
            $path = vswhere -latest -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe | select-object -first 1
            if ($path) {
              & $path /restore /t:rebuild
              & $path /restore /t:rebuild /p:Configuration=Release
            }

      - name: Managed Solution Artifact ${{ steps.solution-unique-name.outputs.info }}_${{ steps.solution-version.outputs.info }}_managed.zip
        if: steps.checkpcfconfig.outputs.exists == 'True'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.solution-unique-name.outputs.info }}_${{ steps.solution-version.outputs.info }}_managed.zip
          path: ${{ steps.checkpcfconfig.outputs.buildtarget }}/bin/Release/${{ steps.solution-unique-name.outputs.info }}.zip

      - name: Unmanaged Solution Artifact ${{ steps.solution-unique-name.outputs.info }}_${{ steps.solution-version.outputs.info }}_unmanaged.zip
        if: steps.checkpcfconfig.outputs.exists == 'True'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.solution-unique-name.outputs.info }}_${{ steps.solution-version.outputs.info }}_unmanaged.zip
          path: ${{ steps.checkpcfconfig.outputs.buildtarget }}/bin/Debug/${{ steps.solution-unique-name.outputs.info }}.zip

      - name: Create Release ${{ steps.solution-unique-name.outputs.info }}_v${{ steps.solution-version.outputs.info }}
        id: create_release
        uses: actions/create-release@v1
        if: contains(github.ref, 'refs/tags/v') || github.event.inputs.release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.solution-unique-name.outputs.info }}_v${{ steps.solution-version.outputs.info }}
          draft: false
          prerelease: false

      - name: Upload Release Asset ${{ steps.solution-unique-name.outputs.info }}_${{ steps.solution-version.outputs.info }}_managed.zip (Managed)
        id: release-managed-solution
        uses: actions/upload-release-asset@v1
        if: steps.create_release.conclusion == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.checkpcfconfig.outputs.buildtarget }}/bin/Release/${{ steps.solution-unique-name.outputs.info }}.zip
          asset_name: ${{ steps.solution-unique-name.outputs.info }}_${{ steps.solution-version.outputs.info }}_managed.zip
          asset_content_type: application/zip

      - name: Upload Release Asset ${{ steps.solution-unique-name.outputs.info }}_${{ steps.solution-version.outputs.info }}_unmanaged.zip (Unmanaged)
        id: release-unmanaged-solution
        uses: actions/upload-release-asset@v1
        if: steps.create_release.conclusion == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.checkpcfconfig.outputs.buildtarget }}/bin/Debug/${{ steps.solution-unique-name.outputs.info }}.zip
          asset_name: ${{ steps.solution-unique-name.outputs.info }}_${{ steps.solution-version.outputs.info }}_unmanaged.zip
          asset_content_type: application/zip
